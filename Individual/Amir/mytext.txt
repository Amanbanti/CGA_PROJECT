# Lessons

## Lesson 1: Programming for a Purpose  
- Explored the **Activity Guide** to understand user needs.  
- Recommended templates to clients based on the target audience, purpose, and platform:  
  - **Educational Games for Children:** Maria - Template E (Interactive and simple for reading practice).  
  - **Environmental Animation:** Richard - Template D (Clean skies and nature-focused).  
  - **Text-Based Block:** Layla - Template B (Pre-structured for easy adaptation).  
  - **Interactive Animation:** Emma - Template C (Replace chickens with sharks for thematic relevance).  
  - **Comic and Space Game:** Levi - Template A (Engages users interested in sci-fi).  
- Completed a survey on identifying the purpose of games and animations.  

---

## Lesson 2: Plotting Shapes  
- Learned how to use grids and axes to draw shapes accurately on the screen.  
- Followed instructions to replicate a car design using shapes on **Game Lab's grid**.  
- Experimented with placing shapes using the `rect()` function:
  - Example: Placed a rectangle in the bottom-right corner using `rect(350,350);`.  
  - Added two rectangles in the corners:  
    ```javascript
    rect(0,0);  
    rect(350,350);
    ```  
  - Changed the color of a rectangle:  
    ```javascript
    fill("yellow");  
    rect(100,100);  
    rect(250,100);
    ```  

---

## Lesson 3: Drawing in Game Lab  
* Predicted outputs of shapes drawn with `rect()` and confirmed their behavior in the program.  
* Experimented with code by modifying shapes' positions and colors.  
  - Example: Added a new square:  
    
    rect(200,200);  
    rect(300,400);  
    rect(100,350);
    ```  
* Explored the impact of code order:  
* Initially drew a red rectangle followed by a blue rectangle.  
* Modified the red rectangle to green and changed the order to display it on top:  
      
      fill("blue");  
      rect(175,175);  
      fill("green");  
      rect(200,200);
      ```  
* Working with Ellipses
Learned how to use the ellipse() function to create circles on the canvas.
Added ellipses with different colors and positions:

    fill("teal");
    ellipse(100, 100);

    fill("orange");
    ellipse(200, 200);
* Debugging - Fix a Car
Observed that the red body of the car was hiding the wheels.
Rearranged the blocks so the wheels appeared on top of the car body:

// Rearranged the code to make the wheels visible
fill("dimgray");
ellipse(150, 300);
ellipse(250, 300);

fill("red");
rect(100, 250);
rect(150, 250);
rect(200, 250);
rect(250, 250);
rect(150, 200);
rect(200, 200);

* Debugging - Rearrange Code for Correct Output
Reviewed the buggy code meant to create a specific design.
Rearranged and modified the code to match the intended picture:

// Corrected the code to match the instructions
fill("orange");
ellipse(150, 150);
ellipse(200, 150);
ellipse(150, 200);
ellipse(200, 200);

fill("purple");
rect(150, 150);

* Drawing Points - Ladybug
Used the point() and strokeWeight() functions to draw a ladybug on the screen.
Completed the code by adding missing blocks to match the picture.
Added legs to the ladybug as a challenge:

// Drawing the ladybug
strokeWeight(35);
point(200, 170);

strokeWeight(5);
fill("red");
ellipse(200, 200);
point(200, 190);
point(210, 200);
point(190, 200);
point(200, 210);

This session focused on debugging and creative use of shapes and points to produce the desired visual designs, reinforcing the importance of code order and precise positioning.


## Lesson 4: Shapes and Parameters

## Guess and Verify Shape Behavior
This exercise asked us to predict how parameters like width and height affect the appearance of rectangles. After making predictions, we ran the code to see the actual result.

fill("blue");
rect(100, 100, 100, 200);
fill("red");
rect(250, 100, 100, 150);

## Make Red Rectangle Longer
Modified the parameters of the second rect() to make the red rectangle longer than the blue one.

fill("blue");
rect(100, 100, 100, 150);
fill("red");
rect(250, 100, 100, 200);

## Orange Ellipse Behind Green Ellipse
What the exercise did: Added an orange ellipse taller than the green one and arranged the code so the orange ellipse appears behind the green ellipse.

fill("orange");
ellipse(200, 200, 240, 300);
fill("green");
ellipse(200, 200, 200, 150);

## Change Background and Display All Shapes
Changed the background to orange and rearranged the code so the purple square was visible alongside the blue square.

fill("purple");
rect(50, 50, 100, 100);
background("orange");
fill("blue");
rect(250, 250, 100, 100);

## Black Background for Green Circle
Added a black background behind a green circle while ensuring proper order of blocks.

background("black");
fill("green");
ellipse(200, 200, 200, 200);

## Extend Grass to Cover Bottom
Fixed an error to ensure the grass rectangle extends across the entire bottom of the screen.

// Draw sky
background("skyblue");
// Draw sun
fill("yellow");
ellipse(350, 50, 50, 50);
// Draw grass
fill("green");
rect(0, 300, 400, 100);

## Rearrange Rainbow Ellipses
Rearranged blocks to display rainbow-colored concentric ellipses in the correct order.

fill("red");
ellipse(200, 200, 400, 400);
fill("orange");
ellipse(200, 200, 340, 340);
fill("yellow");
ellipse(200, 200, 280, 280);
fill("green");
ellipse(200, 200, 220, 220);
fill("blue");
ellipse(200, 200, 160, 160);
fill("indigo");
ellipse(200, 200, 100, 100);
fill("violet");
ellipse(200, 200, 40, 40);

## Adjust Cloud Shape
Debugged parameters of an ellipse to make the cloud wider than it is tall.

// Draw sky
background("skyblue");
// Draw sun
fill("yellow");
ellipse(300, 50, 50, 50);
// Draw grass
fill("green");
rect(0, 350, 400, 100);
// Draw cloud
fill("white");
ellipse(150, 100, 200, 100);

## Add Polygons to Complete Image
Added missing polygons using regularPolygon() to create a pattern with increasing sides in each row.

regularPolygon(50, 75, 3, 50);
regularPolygon(150, 75, 4, 50);
regularPolygon(250, 75, 5, 50);
regularPolygon(350, 75, 6, 50);
regularPolygon(50, 175, 7, 50);
regularPolygon(150, 175, 8, 50);
regularPolygon(250, 175, 9, 50);
regularPolygon(350, 175, 10, 50);
regularPolygon(50, 275, 11, 50);
regularPolygon(150, 275, 12, 50);
regularPolygon(250, 275, 13, 50);
regularPolygon(350, 275, 14, 50);

## Lesson 5: Variables in Graphics

# Prediction and Variables
Predicted where the circle would appear on the canvas when using variables for its position.

var xPosition = 300;
var whatsTheY = 100;
ellipse(xPosition, whatsTheY);

My Prediction: The circle will be drawn at the bottom left of the chart. Changing the numbers changes its position.

# Updating Variables
Updated variable values to reposition the ellipse to the bottom center of the canvas.

var xPosition = 200;
var whatsTheY = 300;
ellipse(xPosition, whatsTheY);

# Debugging: Naming Variables
Corrected variable names to follow proper naming conventions (no spaces, no starting with numbers, consistent capitalization).

var size = 150;
var xPosition = 100;
var yPosition = 200;

fill("OrangeRed");
ellipse(xPosition, yPosition, size, size);

# Using Variables Multiple Times
Adjusted a single variable (petalSize) to ensure that red petals touch each other in a flower design.

var petalSize = 80;

// Set Up
noStroke();
background("ForestGreen");

// Petals
fill("red");
ellipse(150,200,petalSize,petalSize);
ellipse(200,150,petalSize,petalSize);
ellipse(250,200,petalSize,petalSize);
ellipse(200,250,petalSize,petalSize);

// Flower Center
fill("black");
ellipse(200,200,50,50);

# Debugging: Using Variables
Changed the value of circleSize to make the circle fill the entire canvas.

var circleSize = 600;

fill("Crimson");
ellipse(200, 200, circleSize, circleSize);

# Using Variables for Consistency
Modified the program so both eyes of a face used the same variable for their size (eyeSize).

var eyeSize = 25;

noStroke();
background("green");

// Face
fill("yellow");
ellipse(200,200,200,200);

// Eyes
fill("black");
ellipse(160,170,eyeSize,eyeSize);
ellipse(240,170,eyeSize,eyeSize); // Updated to use eyeSize variable

// Mouth
fill("white");
rect(160,240,80,20);

# Challenge: String Variables
Used string variables to assign color values to shapes and polygons, demonstrating the flexibility of variables for non-numeric data.

var color1 = "crimson";
var color2 = "coral";
var color3 = "purple";
var color4 = "azure";

fill(color1);
regularPolygon(200, 200, 5, 200);

fill(color2);
regularPolygon(200, 200, 6, 150);

fill(color3);
regularPolygon(200, 200, 7, 100);

fill(color4);
ellipse(200, 200, 100, 100);
This lesson focused on understanding the use of variables in graphical programming, debugging variable-related issues, and experimenting with both numeric and string variables for flexible and reusable designs.

## Lesson 6 Summary: Random Numbers and Variables

# Predicted the Outcome of randomNumber()
Ran the program to see how randomNumber() changes the position of an orange ellipse on a tomato background.

background("tomato");
fill("orange");
ellipse(randomNumber(200, 400), 200, 50, 50);

# Updated the Ellipse's Horizontal and Vertical Positions
Made the ellipse appear anywhere horizontally and vertically by updating the randomNumber() range.

background("tomato");
fill("orange");
ellipse(randomNumber(0, 400), randomNumber(0, 400), 50, 50);

# Assigned Random Values to Variables

Used the randomNumber() function to make eye sizes random in a face drawing.

var eyeSize = randomNumber(1, 55);
noStroke();
background("green");

// Face
fill("yellow");
ellipse(200, 200, 200, 200);

// Eyes
fill("black");
ellipse(160, 170, eyeSize, eyeSize);
ellipse(240, 170, eyeSize, eyeSize);

// Mouth
fill("white");
rect(160, 240, 80, 20);

# Randomized Flower Petal Sizes
Made each flower's petals appear with random sizes by assigning randomNumber() to a variable.

var petalSize;

// First flower
petalSize = randomNumber(1, 50);
fill("purple");
ellipse(75, 100, petalSize, petalSize);
ellipse(125, 100, petalSize, petalSize);
ellipse(100, 75, petalSize, petalSize);
ellipse(100, 125, petalSize, petalSize);

// Second flower
petalSize = randomNumber(1, 50);
ellipse(275, 300, petalSize, petalSize);
ellipse(325, 300, petalSize, petalSize);
ellipse(300, 275, petalSize, petalSize);
ellipse(300, 325, petalSize, petalSize);

# Fixed Random Shape Placement
Ensured rectangles stacked together by sharing a single random value.

var xPosition = randomNumber(1, 150);
fill("pink");
rect(xPosition, 100, 250, 50);
fill("purple");
rect(xPosition, 150, 250, 50);
fill("firebrick");
rect(xPosition, 200, 250, 50);

#Extended the Rainbow Snake
Added more colored circles to a snake, using randomNumber() for random vertical "wiggles."

background("skyBlue");

fill("red");
ellipse(100, randomNumber(190, 210), 50, 50);

fill("orange");
ellipse(140, randomNumber(190, 210), 50, 50);

fill("yellow");
ellipse(180, randomNumber(190, 210), 50, 50);

fill("green");
ellipse(220, randomNumber(190, 210), 50, 50);

fill("blue");
ellipse(260, randomNumber(190, 210), 50, 50);

fill("purple");
ellipse(300, randomNumber(190, 210), 50, 50);

# Created a Random Rainbow
Used rgb(randomNumber()) to create random colors for the background, rainbow arcs, and ground.

// Background
background(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));

// Rainbow
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
ellipse(200, 200, 400, 400);
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
ellipse(200, 200, 340, 340);
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
ellipse(200, 200, 280, 280);
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
ellipse(200, 200, 220, 220);
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
ellipse(200, 200, 160, 160);

// Ground
fill(rgb(randomNumber(0, 255), randomNumber(0, 255), randomNumber(0, 255)));
rect(0, 200, 400, 200);

## Lesson 7: Regular Polygons and Robot Face

1. Reviewing Regular Polygons
Refreshed my understanding of the regularPolygon() block by reading the documentation. This block creates a regular polygon with a specified number of sides, size, and position.
I experimented with the block to see how changing the number of sides affects the shape.
2. Adding Shapes to Match the Picture
Created a grid of regular polygons, each with a different number of sides and arranged neatly in rows.

Below is the code I used to recreate the image with polygons of 3 to 14 sides:

regularPolygon(50, 75, 3, 50);  // Triangle
regularPolygon(150, 75, 4, 50); // Square
regularPolygon(250, 75, 5, 50); // Pentagon
regularPolygon(350, 75, 6, 50); // Hexagon

regularPolygon(50, 175, 7, 50);  // Heptagon
regularPolygon(150, 175, 8, 50); // Octagon
regularPolygon(250, 175, 9, 50); // Nonagon
regularPolygon(350, 175, 10, 50); // Decagon

regularPolygon(50, 275, 11, 50); // Hendecagon
regularPolygon(150, 275, 12, 50); // Dodecagon
regularPolygon(250, 275, 13, 50); // Tridecagon
regularPolygon(350, 275, 14, 50); // Tetradecagon

# Creating a Robot Face
I designed a robot face that uses at least four shape blocks and four variables with random numbers to make the design dynamic and change every time the program runs.

Features of the Robot Face:
Face Base

Used a rectangular base to represent the robot's "skin" with a fixed size and a metallic gray color.

var skin = rgb(192, 192, 192);
fill(skin);
rect(50, 100, 300, 250);
Eyes

Added two large, circular eyes with smaller blue points to represent pupils.
The eye size is controlled by the variable small.

var small = 50;
fill(componentColor);
ellipse(125, 175, small, small);
ellipse(275, 175, small, small);

strokeWeight(20);
stroke("blue");
point(130, 185);
point(270, 185);
noStroke();

Nose
Designed a rectangular nose whose height is randomized using the noseSize variable. This ensures the nose changes each time the program runs.

var noseSize = randomNumber(50, 150);
fill(componentColor);
rect(175, 175, small, noseSize);

Mouth
Created a smiling green arc to represent the robot's mouth.

fill("green");
arc(200, 300, 100, 100, 0, 180);
Other Components

Added a smaller rectangle below the face for a neck.
This block adds depth and makes the robot feel more complete.

rect(175, 350, small, small);

Final Code for the Robot Face:

var skin = rgb(192, 192, 192);
var componentColor = "orange";
var small = 50;
var noseSize = randomNumber(50, 150);

// Face
fill(skin);
rect(50, 100, 300, 250);
rect(175, 350, small, small);

// Eyes
fill(componentColor);
ellipse(125, 175, small, small);
ellipse(275, 175, small, small);
strokeWeight(20);
stroke("blue");
point(130, 185);
point(270, 185);
noStroke();

// Nose
fill(componentColor);
rect(175, 175, small, noseSize);

// Mouth
fill("green");
arc(200, 300, 100, 100, 0, 180);